/**
 * Service d'envoi de templates WhatsApp
 * G√®re l'envoi de templates WhatsApp via l'API Meta Business
 */

const express = require('express');
const cors = require('cors');
const { createClient } = require('@supabase/supabase-js');

const app = express();
const PORT = process.env.PORT || 3003;

// Configuration CORS
app.use(cors());
app.use(express.json());

// Configuration Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
const supabase = createClient(supabaseUrl, supabaseServiceKey);

/**
 * R√©cup√®re les templates disponibles depuis l'API Meta
 */
app.get('/templates', async (req, res) => {
  try {
    // Pour l'instant, retourner des templates pr√©d√©finis
    const templates = [
      {
        name: 'welcome_checkin',
        displayName: 'Bienvenue et instructions d\'arriv√©e',
        description: 'Message de bienvenue avec informations d\'arriv√©e'
      },
      {
        name: 'welcome_booking_confirmation',
        displayName: 'Confirmation de r√©servation',
        description: 'Confirmation de r√©servation avec d√©tails'
      },
      {
        name: 'welcome_property_info',
        displayName: 'Informations sur la propri√©t√©',
        description: 'Informations d√©taill√©es sur la propri√©t√©'
      },
      {
        name: 'welcome_contact_host',
        displayName: 'Contact h√¥te disponible',
        description: 'Informations de contact de l\'h√¥te'
      },
      {
        name: 'welcome_custom',
        displayName: 'Message personnalis√©',
        description: 'Template personnalisable'
      }
    ];
    
    res.json({ success: true, templates });
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des templates:', error);
    res.status(500).json({ success: false, error: error.message });
  }
});

/**
 * Envoie un template WhatsApp
 */
app.post('/send-template', async (req, res) => {
  try {
    const { template_name, host_id, to, guest_name, property_id, test_mode = false } = req.body;
    
    console.log(`üìß Envoi du template ${template_name} √† ${to} (Test: ${test_mode})`);
    
    // R√©cup√©rer la configuration WhatsApp
    const { data: config, error: configError } = await supabase
      .from('whatsapp_config')
      .select('phone_number_id, token')
      .order('updated_at', { ascending: false })
      .limit(1)
      .single();
    
    if (configError || !config) {
      throw new Error('Configuration WhatsApp non trouv√©e');
    }
    
    // R√©cup√©rer les informations de la propri√©t√©
    const { data: property, error: propError } = await supabase
      .from('properties')
      .select('name, address')
      .eq('id', property_id)
      .single();
    
    if (propError) {
      console.warn('Propri√©t√© non trouv√©e:', propError);
    }
    
    // G√©n√©rer le contenu du template selon le type
    const templateContent = generateTemplateContent(template_name, {
      guest_name,
      property_name: property?.name || 'notre propri√©t√©',
      property_address: property?.address || ''
    });
    
    if (test_mode) {
      console.log(`‚úÖ Mode test - Template ${template_name} g√©n√©r√©:`, templateContent);
      return res.json({ 
        success: true, 
        message: 'Template envoy√© en mode test', 
        template_content: templateContent 
      });
    }
    
    // Envoyer le template via l'API WhatsApp Business
    const whatsappResponse = await sendWhatsAppTemplate(config, {
      to,
      template_name,
      template_content: templateContent,
      guest_name
    });
    
    if (whatsappResponse.success) {
      console.log(`‚úÖ Template ${template_name} envoy√© avec succ√®s √† ${to}`);
      res.json({ success: true, message: 'Template envoy√© avec succ√®s', whatsapp_response: whatsappResponse });
    } else {
      throw new Error(`Erreur WhatsApp: ${whatsappResponse.error}`);
    }
    
  } catch (error) {
    console.error('Erreur lors de l\'envoi du template:', error);
    res.status(500).json({ success: false, error: error.message });
  }
});

/**
 * G√©n√®re le contenu d'un template selon son type
 */
function generateTemplateContent(templateName, variables) {
  const templates = {
    welcome_checkin: `Bonjour ${variables.guest_name} ! üè†
    
Bienvenue dans ${variables.property_name} ! Votre r√©servation est confirm√©e.

üîë Instructions d'arriv√©e :
- Check-in possible d√®s 15h00
- Vous recevrez les codes d'acc√®s 2h avant votre arriv√©e
- Parking disponible si mentionn√© dans votre r√©servation

üì± En cas de question, n'h√©sitez pas √† me contacter.

Excellent s√©jour ! ‚ú®`,

    welcome_booking_confirmation: `Bonjour ${variables.guest_name} ! 
    
‚úÖ Votre r√©servation pour ${variables.property_name} est confirm√©e !

üìç Adresse : ${variables.property_address || 'Coordonn√©es envoy√©es s√©par√©ment'}

üìã Prochaines √©tapes :
- Vous recevrez les d√©tails d'arriv√©e 24h avant
- Check-in : 15h00 - Check-out : 11h00
- Toutes les informations pratiques vous seront communiqu√©es

√Ä bient√¥t ! üè†`,

    welcome_property_info: `Bonjour ${variables.guest_name} ! 
    
üè† Bienvenue dans ${variables.property_name} !

‚ÑπÔ∏è Informations importantes :
- WiFi gratuit (codes dans le logement)
- Toutes commodit√©s incluses
- Guide des recommandations locales disponible
- R√®glement int√©rieur affich√© dans le logement

üõéÔ∏è Service client disponible 24h/7j pour toute question.

Profitez bien de votre s√©jour ! ‚ú®`,

    welcome_contact_host: `Bonjour ${variables.guest_name} ! 
    
üëã Je suis votre h√¥te pour ${variables.property_name}.

üìû Contact direct :
- WhatsApp : Ce num√©ro
- Disponible 7j/7 de 8h √† 22h
- Urgences : Contact imm√©diat possible

ü§ù Je suis l√† pour vous aider √† passer un excellent s√©jour !

N'h√©sitez pas √† me poser toutes vos questions. üòä`,

    welcome_custom: `Bonjour ${variables.guest_name} ! 
    
Bienvenue dans ${variables.property_name} ! 

Votre h√¥te est disponible pour toute question.

Excellent s√©jour ! üè†`
  };
  
  return templates[templateName] || templates.welcome_custom;
}

/**
 * Envoie le template via l'API WhatsApp Business
 */
async function sendWhatsAppTemplate(config, templateData) {
  try {
    // Pour l'instant, simuler l'envoi
    // TODO: Int√©grer avec l'API Meta WhatsApp Business r√©elle
    console.log('Simulation envoi WhatsApp:', {
      phone_number_id: config.phone_number_id,
      to: templateData.to,
      content: templateData.template_content
    });
    
    return { success: true, message_id: `msg_${Date.now()}` };
  } catch (error) {
    return { success: false, error: error.message };
  }
}

/**
 * Test de sant√© du service
 */
app.get('/health', (req, res) => {
  res.json({ status: 'OK', service: 'WhatsApp Template Service', timestamp: new Date().toISOString() });
});

/**
 * Endpoint de test avec template par d√©faut
 */
app.post('/test-template', async (req, res) => {
  try {
    const testData = {
      template_name: 'welcome_checkin',
      host_id: 'test-host',
      to: '+33123456789',
      guest_name: 'Client Test',
      property_id: 'test-property',
      test_mode: true
    };
    
    const result = await req.app.request.post('/send-template', { body: JSON.stringify(testData) });
    res.json(result);
  } catch (error) {
    res.status(500).json({ success: false, error: error.message });
  }
});

app.listen(PORT, '0.0.0.0', () => {
  console.log(`üöÄ Service de templates WhatsApp d√©marr√© sur le port ${PORT}`);
  console.log(`üìç Endpoints disponibles:`);
  console.log(`   GET  http://localhost:${PORT}/health`);
  console.log(`   GET  http://localhost:${PORT}/templates`);
  console.log(`   POST http://localhost:${PORT}/send-template`);
  console.log(`   POST http://localhost:${PORT}/test-template`);
});