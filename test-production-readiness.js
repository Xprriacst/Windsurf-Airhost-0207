#!/usr/bin/env node

/**
 * Script de test de pr√©paration pour la migration production
 * Valide que tous les composants sont pr√™ts pour le d√©ploiement
 */

const PROD_URL = process.env.PROD_SUPABASE_URL;
const PROD_ANON_KEY = process.env.PROD_SUPABASE_ANON_KEY;

async function testProductionReadiness() {
  console.log('üß™ TEST DE PR√âPARATION MIGRATION PRODUCTION');
  console.log('============================================');
  
  const results = {
    connectivity: false,
    migration_script: false,
    backup_capability: false,
    rollback_plan: false,
    documentation: false,
    overall_ready: false
  };

  // Test 1: Connectivit√© production
  console.log('\n1. Test de connectivit√© production...');
  try {
    const response = await fetch(`${PROD_URL}/rest/v1/conversations?select=id&limit=1`, {
      headers: { 'apikey': PROD_ANON_KEY },
      timeout: 10000
    });
    
    if (response.ok) {
      results.connectivity = true;
      console.log('‚úì Connectivit√© production valid√©e');
    } else {
      console.log('‚úó √âchec connectivit√©:', response.status);
    }
  } catch (error) {
    console.log('‚úó Erreur connectivit√©:', error.message);
  }

  // Test 2: Validation du script de migration
  console.log('\n2. Validation du script de migration...');
  try {
    const fs = await import('fs');
    const migrationScript = fs.readFileSync('scripts/production-migration-tags.sql', 'utf8');
    
    // V√©rifications critiques
    const requiredElements = [
      'CREATE TABLE IF NOT EXISTS conversation_analysis',
      'ALTER TABLE messages ADD COLUMN IF NOT EXISTS',
      'ALTER TABLE conversations ADD COLUMN IF NOT EXISTS',
      'CREATE INDEX IF NOT EXISTS',
      'CREATE OR REPLACE FUNCTION',
      'CREATE TRIGGER',
      'ENABLE ROW LEVEL SECURITY'
    ];
    
    const missingElements = requiredElements.filter(element => 
      !migrationScript.includes(element)
    );
    
    if (missingElements.length === 0) {
      results.migration_script = true;
      console.log('‚úì Script de migration complet');
    } else {
      console.log('‚úó √âl√©ments manquants:', missingElements);
    }
  } catch (error) {
    console.log('‚úó Erreur lecture script:', error.message);
  }

  // Test 3: Capacit√© de backup
  console.log('\n3. Test capacit√© de backup...');
  try {
    const testBackup = await fetch(`${PROD_URL}/rest/v1/conversations?select=*&limit=1`, {
      headers: { 'apikey': PROD_ANON_KEY }
    });
    
    if (testBackup.ok) {
      const data = await testBackup.json();
      results.backup_capability = true;
      console.log('‚úì Backup possible (√©chantillon r√©cup√©r√©)');
    } else {
      console.log('‚úó Impossible de cr√©er un backup');
    }
  } catch (error) {
    console.log('‚úó Erreur test backup:', error.message);
  }

  // Test 4: Plan de rollback
  console.log('\n4. Validation plan de rollback...');
  try {
    const fs = await import('fs');
    const deployScript = fs.readFileSync('deploy-production-migration.sh', 'utf8');
    
    if (deployScript.includes('backup') && deployScript.includes('BACKUP_DIR')) {
      results.rollback_plan = true;
      console.log('‚úì Plan de rollback pr√©sent');
    } else {
      console.log('‚úó Plan de rollback insuffisant');
    }
  } catch (error) {
    console.log('‚úó Erreur validation rollback:', error.message);
  }

  // Test 5: Documentation compl√®te
  console.log('\n5. Validation documentation...');
  try {
    const fs = await import('fs');
    const files = [
      'PRODUCTION_MIGRATION_GUIDE.md',
      'scripts/production-migration-tags.sql',
      'deploy-production-migration.sh'
    ];
    
    const existingFiles = files.filter(file => {
      try {
        fs.accessSync(file);
        return true;
      } catch {
        return false;
      }
    });
    
    if (existingFiles.length === files.length) {
      results.documentation = true;
      console.log('‚úì Documentation compl√®te');
    } else {
      console.log('‚úó Fichiers manquants:', files.filter(f => !existingFiles.includes(f)));
    }
  } catch (error) {
    console.log('‚úó Erreur validation documentation:', error.message);
  }

  // √âvaluation globale
  console.log('\nüìã R√âSUM√â DE PR√âPARATION');
  console.log('========================');
  
  const readyCount = Object.values(results).filter(Boolean).length - 1; // -1 pour overall_ready
  results.overall_ready = readyCount >= 4; // Au moins 4/5 tests pass√©s
  
  console.log(`Connectivit√© production: ${results.connectivity ? '‚úì' : '‚úó'}`);
  console.log(`Script de migration: ${results.migration_script ? '‚úì' : '‚úó'}`);
  console.log(`Capacit√© de backup: ${results.backup_capability ? '‚úì' : '‚úó'}`);
  console.log(`Plan de rollback: ${results.rollback_plan ? '‚úì' : '‚úó'}`);
  console.log(`Documentation: ${results.documentation ? '‚úì' : '‚úó'}`);
  
  console.log(`\nüìä Score: ${readyCount}/5`);
  
  if (results.overall_ready) {
    console.log('\nüéØ PR√äT POUR LA MIGRATION PRODUCTION');
    console.log('====================================');
    console.log('Commandes de d√©ploiement:');
    console.log('');
    console.log('# Option 1: Script automatis√©');
    console.log('./deploy-production-migration.sh');
    console.log('');
    console.log('# Option 2: Migration manuelle');
    console.log('# 1. Copier scripts/production-migration-tags.sql');
    console.log('# 2. Coller dans Supabase SQL Editor');
    console.log('# 3. Ex√©cuter la migration');
    console.log('');
    console.log('üìö Guide: PRODUCTION_MIGRATION_GUIDE.md');
  } else {
    console.log('\n‚ö†Ô∏è  MIGRATION NON PR√äTE');
    console.log('=======================');
    console.log('Corriger les probl√®mes ci-dessus avant de proc√©der.');
  }
  
  return results;
}

// Ex√©cuter le test
testProductionReadiness().catch(console.error);