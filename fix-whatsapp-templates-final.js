/**
 * Correction finale de la table whatsapp_config pour supporter les templates
 * Ajoute les colonnes manquantes et valide le syst√®me complet
 */

import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.VITE_PROD_SUPABASE_URL;
const supabaseKey = process.env.PROD_SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('Variables d\'environnement Supabase manquantes');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

/**
 * Ajoute les colonnes manquantes √† la table whatsapp_config
 */
async function fixWhatsAppConfigTable() {
  try {
    console.log('üîß Ajout des colonnes pour les templates de bienvenue...');
    
    // Ajouter les colonnes une par une pour √©viter les erreurs
    const columnsToAdd = [
      'send_welcome_template BOOLEAN DEFAULT false',
      'welcome_template_name TEXT',
      'template_settings JSONB DEFAULT \'{}\'::jsonb'
    ];
    
    for (const column of columnsToAdd) {
      try {
        const { error } = await supabase.rpc('exec_sql', {
          sql: `ALTER TABLE whatsapp_config ADD COLUMN IF NOT EXISTS ${column};`
        });
        
        if (error) {
          console.log(`‚ö†Ô∏è Colonne ${column.split(' ')[0]} peut-√™tre d√©j√† existante:`, error.message);
        } else {
          console.log(`‚úÖ Colonne ${column.split(' ')[0]} ajout√©e avec succ√®s`);
        }
      } catch (err) {
        console.log(`‚ö†Ô∏è Erreur pour ${column.split(' ')[0]}:`, err.message);
      }
    }
    
    console.log('‚úÖ Structure de table mise √† jour');
    return true;
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la mise √† jour de la table:', error.message);
    return false;
  }
}

/**
 * Teste la sauvegarde avec la nouvelle structure
 */
async function testTemplateSaveWithNewStructure() {
  try {
    console.log('üíæ Test de sauvegarde avec nouvelle structure...');
    
    const testConfig = {
      phone_number_id: '604674832740532',
      token: 'test_token_complet',
      send_welcome_template: true,
      welcome_template_name: 'hello_world',
      template_settings: {
        auto_detect: true,
        fallback_enabled: true,
        available_templates: ['hello_world']
      }
    };
    
    const { data, error } = await supabase
      .from('whatsapp_config')
      .upsert(testConfig)
      .select();
    
    if (error) {
      console.log('‚ùå Erreur de sauvegarde:', error.message);
      return false;
    }
    
    console.log('‚úÖ Configuration sauvegard√©e avec succ√®s');
    console.log('üìä Donn√©es sauvegard√©es:', {
      phone_number_id: data[0].phone_number_id,
      send_welcome_template: data[0].send_welcome_template,
      welcome_template_name: data[0].welcome_template_name,
      template_settings: data[0].template_settings
    });
    
    return true;
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test de sauvegarde:', error.message);
    return false;
  }
}

/**
 * Valide la r√©cup√©ration de configuration
 */
async function testConfigRetrieval() {
  try {
    console.log('üîç Test de r√©cup√©ration de configuration...');
    
    const { data, error } = await supabase
      .from('whatsapp_config')
      .select('*')
      .single();
    
    if (error) {
      console.log('‚ö†Ô∏è Aucune configuration trouv√©e:', error.message);
      return false;
    }
    
    console.log('‚úÖ Configuration r√©cup√©r√©e:');
    console.log('  - Phone Number ID:', data.phone_number_id);
    console.log('  - Templates activ√©s:', data.send_welcome_template);
    console.log('  - Template par d√©faut:', data.welcome_template_name);
    console.log('  - Param√®tres:', data.template_settings);
    
    return true;
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration:', error.message);
    return false;
  }
}

/**
 * Fonction principale de correction
 */
async function fixAndValidateSystem() {
  console.log('üéØ CORRECTION FINALE DU SYST√àME DE TEMPLATES');
  console.log('=' * 50);
  
  // √âtape 1: Corriger la structure de table
  console.log('\n1. Correction de la structure de table:');
  const tableFixed = await fixWhatsAppConfigTable();
  
  // √âtape 2: Tester la sauvegarde
  console.log('\n2. Test de sauvegarde:');
  const saveTest = await testTemplateSaveWithNewStructure();
  
  // √âtape 3: Tester la r√©cup√©ration
  console.log('\n3. Test de r√©cup√©ration:');
  const retrievalTest = await testConfigRetrieval();
  
  // R√©sum√©
  console.log('\nüìä R√âSUM√â DES CORRECTIONS:');
  console.log('=' * 30);
  console.log(`‚úÖ Structure table: ${tableFixed ? 'CORRIG√âE' : '√âCHEC'}`);
  console.log(`‚úÖ Sauvegarde: ${saveTest ? 'OP√âRATIONNELLE' : '√âCHEC'}`);
  console.log(`‚úÖ R√©cup√©ration: ${retrievalTest ? 'OP√âRATIONNELLE' : '√âCHEC'}`);
  
  const allSuccess = tableFixed && saveTest && retrievalTest;
  
  if (allSuccess) {
    console.log('\nüéâ SYST√àME ENTI√àREMENT OP√âRATIONNEL!');
    console.log('üí° L\'interface utilisateur peut maintenant:');
    console.log('   ‚Üí R√©cup√©rer automatiquement les templates depuis Meta Business API');
    console.log('   ‚Üí Utiliser le syst√®me de fallback avec hello_world');
    console.log('   ‚Üí Sauvegarder les pr√©f√©rences de templates');
    console.log('   ‚Üí Proposer une liste d√©roulante intelligente');
  } else {
    console.log('\n‚ö†Ô∏è Certaines corrections n√©cessitent une attention suppl√©mentaire');
  }
}

// Ex√©cution
fixAndValidateSystem().catch(console.error);