/**
 * Analyse compl√®te de l'architecture de la base de donn√©es Airhost
 * Pour comprendre la relation entre utilisateurs, h√¥tes et propri√©t√©s
 */

import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const serviceKey = process.env.VITE_SUPABASE_SERVICE_ROLE_KEY;

const supabase = createClient(supabaseUrl, serviceKey);

async function analyzeDatabaseArchitecture() {
  console.log('üîç Analyse de l\'architecture de la base de donn√©es Airhost...\n');
  
  try {
    // 1. Analyser la table users (utilisateurs Supabase Auth)
    console.log('üë• ANALYSE DES UTILISATEURS (auth.users):');
    const { data: authUsers, error: authError } = await supabase.auth.admin.listUsers();
    
    if (authError) {
      console.log('‚ö†Ô∏è Impossible d\'acc√©der √† auth.users:', authError.message);
    } else {
      console.log(`   ‚Ä¢ ${authUsers.users?.length || 0} utilisateur(s) dans auth.users`);
      authUsers.users?.forEach(user => 
        console.log(`     - ${user.email} (${user.id})`)
      );
    }
    
    // 2. Analyser la table public.users (si elle existe)
    console.log('\nüë§ ANALYSE DES UTILISATEURS (public.users):');
    const { data: publicUsers, error: publicUsersError } = await supabase
      .from('users')
      .select('*');
    
    if (publicUsersError) {
      console.log('   ‚Ä¢ Table public.users n\'existe pas ou erreur:', publicUsersError.message);
    } else {
      console.log(`   ‚Ä¢ ${publicUsers?.length || 0} utilisateur(s) dans public.users`);
      publicUsers?.forEach(user => 
        console.log(`     - ${user.email || user.name || user.id}`)
      );
    }
    
    // 3. Analyser la table hosts (si elle existe)
    console.log('\nüè† ANALYSE DES H√îTES (hosts):');
    const { data: hosts, error: hostsError } = await supabase
      .from('hosts')
      .select('*');
    
    if (hostsError) {
      console.log('   ‚Ä¢ Table hosts n\'existe pas ou erreur:', hostsError.message);
    } else {
      console.log(`   ‚Ä¢ ${hosts?.length || 0} h√¥te(s) dans la table hosts`);
      hosts?.forEach(host => 
        console.log(`     - ${host.name || host.email || host.id}`)
      );
    }
    
    // 4. Analyser la table properties
    console.log('\nüèòÔ∏è ANALYSE DES PROPRI√âT√âS (properties):');
    const { data: properties, error: propertiesError } = await supabase
      .from('properties')
      .select('*');
    
    if (propertiesError) {
      console.log('   ‚Ä¢ Erreur:', propertiesError.message);
    } else {
      console.log(`   ‚Ä¢ ${properties?.length || 0} propri√©t√©(s) dans la base`);
      properties?.forEach(property => 
        console.log(`     - ${property.name} (${property.id}) ‚Üí host_id: ${property.host_id}`)
      );
    }
    
    // 5. Analyser les conversations
    console.log('\nüí¨ ANALYSE DES CONVERSATIONS:');
    const { data: conversations, error: conversationsError } = await supabase
      .from('conversations')
      .select('id, guest_name, property_id')
      .limit(10);
    
    if (conversationsError) {
      console.log('   ‚Ä¢ Erreur:', conversationsError.message);
    } else {
      console.log(`   ‚Ä¢ ${conversations?.length || 0} conversation(s) (sur les 10 premi√®res)`);
      
      const withProperty = conversations?.filter(c => c.property_id) || [];
      const withoutProperty = conversations?.filter(c => !c.property_id) || [];
      
      console.log(`     - Avec property_id: ${withProperty.length}`);
      console.log(`     - Sans property_id: ${withoutProperty.length}`);
    }
    
    // 6. V√©rifier la relation catheline
    console.log('\nüéØ V√âRIFICATION DE CATHELINE:');
    const cathelinesEmail = 'catheline@agences-placid.com';
    const cathelinesHostId = '4d3e2258-791f-471d-9320-666afbab2e29';
    const cathelinesPropertyId = '5097557f-1ba3-4474-8a94-b111d73cfcba';
    
    // V√©rifier si la propri√©t√© existe avec le bon host_id
    const { data: cathelinesProperty, error: cathelinesPropertyError } = await supabase
      .from('properties')
      .select('*')
      .eq('id', cathelinesPropertyId)
      .single();
    
    if (cathelinesPropertyError) {
      console.log(`   ‚Ä¢ ‚ùå Propri√©t√© ${cathelinesPropertyId} introuvable`);
    } else {
      console.log(`   ‚Ä¢ ‚úÖ Propri√©t√© trouv√©e: ${cathelinesProperty.name}`);
      console.log(`     - host_id dans la propri√©t√©: ${cathelinesProperty.host_id}`);
      console.log(`     - host_id attendu: ${cathelinesHostId}`);
      console.log(`     - Correspond: ${cathelinesProperty.host_id === cathelinesHostId ? 'OUI' : 'NON'}`);
    }
    
    // V√©rifier les conversations li√©es √† cette propri√©t√©
    const { data: cathelinesConversations, error: cathelinesConversationsError } = await supabase
      .from('conversations')
      .select('id, guest_name, property_id')
      .eq('property_id', cathelinesPropertyId);
    
    if (cathelinesConversationsError) {
      console.log(`   ‚Ä¢ ‚ùå Erreur conversations: ${cathelinesConversationsError.message}`);
    } else {
      console.log(`   ‚Ä¢ Conversations de cette propri√©t√©: ${cathelinesConversations?.length || 0}`);
      cathelinesConversations?.forEach(conv => 
        console.log(`     - ${conv.guest_name} (${conv.id})`)
      );
    }
    
    // 7. Recommandations d'architecture
    console.log('\nüìã RECOMMANDATIONS D\'ARCHITECTURE:');
    
    const hasPublicUsers = !publicUsersError && publicUsers && publicUsers.length > 0;
    const hasHosts = !hostsError && hosts && hosts.length > 0;
    const hasProperties = !propertiesError && properties && properties.length > 0;
    
    if (hasPublicUsers && hasHosts) {
      console.log('   ‚Ä¢ ‚ö†Ô∏è Redondance: Tables users ET hosts d√©tect√©es');
      console.log('   ‚Ä¢ üí° Recommandation: Utiliser soit auth.users + properties, soit une table hosts unifi√©e');
    }
    
    if (!hasProperties) {
      console.log('   ‚Ä¢ ‚ùå Table properties manquante - essentielle pour le filtrage');
    }
    
    console.log('\nüèóÔ∏è ARCHITECTURE RECOMMAND√âE:');
    console.log('   1. auth.users (Supabase Auth) - authentification');
    console.log('   2. properties (host_id r√©f√©rence auth.users.id) - propri√©t√©s');
    console.log('   3. conversations (property_id r√©f√©rence properties.id) - conversations');
    console.log('   4. Supprimer tables redondantes: hosts, public.users si non utilis√©es');
    
  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
  }
}

analyzeDatabaseArchitecture();