/**
 * Configuration de l'utilisateur catheline@agences-placid.com
 * Cr√©ation de sa propri√©t√© et liaison des conversations appropri√©es
 */

import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const serviceKey = process.env.VITE_SUPABASE_SERVICE_ROLE_KEY;

const supabase = createClient(supabaseUrl, serviceKey);

async function setupCathelineUser() {
  console.log('üë§ Configuration de l\'utilisateur catheline@agences-placid.com...');
  
  try {
    const cathelinesEmail = 'catheline@agences-placid.com';
    let cathelinesHostId = '4d3e2258-791f-471d-9320-666afbab2e29';
    const cathelinesPropertyId = '5097557f-1ba3-4474-8a94-b111d73cfcba';
    
    // 1. Cr√©er l'utilisateur catheline dans auth.users
    console.log('üîê Cr√©ation de l\'utilisateur dans auth.users...');
    
    const { data: newUser, error: userError } = await supabase.auth.admin.createUser({
      email: cathelinesEmail,
      password: 'TempPassword123!',
      email_confirm: true,
      user_metadata: {
        name: 'Catheline Agences Placid'
      }
    });
    
    if (userError && !userError.message.includes('User already registered')) {
      throw userError;
    }
    
    if (newUser.user) {
      console.log(`‚úÖ Utilisateur cr√©√©: ${newUser.user.email} (${newUser.user.id})`);
      
      // Mettre √† jour l'ID si diff√©rent
      if (newUser.user.id !== cathelinesHostId) {
        console.log(`‚ö†Ô∏è L'ID g√©n√©r√© (${newUser.user.id}) diff√®re de l'ID attendu (${cathelinesHostId})`);
        console.log('üí° Utilisation de l\'ID g√©n√©r√© pour la suite...');
        cathelinesHostId = newUser.user.id;
      }
    } else {
      console.log('‚úÖ Utilisateur d√©j√† existant');
    }
    
    // 2. Cr√©er la propri√©t√© de catheline
    console.log('\nüè† Cr√©ation de la propri√©t√©...');
    
    const { data: existingProperty, error: checkError } = await supabase
      .from('properties')
      .select('*')
      .eq('id', cathelinesPropertyId)
      .single();
    
    if (checkError && checkError.code !== 'PGRST116') {
      throw checkError;
    }
    
    if (!existingProperty) {
      const { data: newProperty, error: propertyError } = await supabase
        .from('properties')
        .insert({
          id: cathelinesPropertyId,
          name: 'Loft Moderne Montmartre',
          host_id: cathelinesHostId,
          address: 'Montmartre, Paris, France'
        })
        .select()
        .single();
      
      if (propertyError) throw propertyError;
      
      console.log(`‚úÖ Propri√©t√© cr√©√©e: ${newProperty.name} (${newProperty.id})`);
    } else {
      // Mettre √† jour le host_id si n√©cessaire
      if (existingProperty.host_id !== cathelinesHostId) {
        const { error: updateError } = await supabase
          .from('properties')
          .update({ host_id: cathelinesHostId })
          .eq('id', cathelinesPropertyId);
        
        if (updateError) throw updateError;
        console.log(`üîÑ Propri√©t√© mise √† jour avec le bon host_id`);
      } else {
        console.log(`‚úÖ Propri√©t√© d√©j√† existante: ${existingProperty.name}`);
      }
    }
    
    // 3. Identifier et lier les conversations de catheline
    console.log('\nüí¨ Liaison des conversations...');
    
    // Rechercher les conversations qui devraient appartenir √† catheline
    // Bas√© sur les noms des invit√©s ou autres crit√®res
    const { data: conversationsToLink, error: conversationsError } = await supabase
      .from('conversations')
      .select('id, guest_name, property_id')
      .in('guest_name', ['V√©ro Ruelle', 'ingrid devetzis']);
    
    if (conversationsError) throw conversationsError;
    
    console.log(`üìã Conversations √† lier: ${conversationsToLink?.length || 0}`);
    
    for (const conversation of conversationsToLink || []) {
      if (conversation.property_id !== cathelinesPropertyId) {
        const { error: linkError } = await supabase
          .from('conversations')
          .update({ property_id: cathelinesPropertyId })
          .eq('id', conversation.id);
        
        if (linkError) {
          console.log(`‚ö†Ô∏è Erreur liaison ${conversation.guest_name}:`, linkError.message);
        } else {
          console.log(`‚úÖ ${conversation.guest_name} li√©e √† la propri√©t√©`);
        }
      }
    }
    
    // 4. V√©rification finale
    console.log('\nüîç V√©rification finale...');
    
    const { data: finalCheck, error: finalError } = await supabase
      .from('conversations')
      .select(`
        id,
        guest_name,
        property_id,
        property:properties!inner(id, name, host_id)
      `)
      .eq('property.host_id', cathelinesHostId);
    
    if (finalError) throw finalError;
    
    console.log(`üéâ Configuration termin√©e !`);
    console.log(`   ‚Ä¢ Utilisateur: ${cathelinesEmail} (${cathelinesHostId})`);
    console.log(`   ‚Ä¢ Propri√©t√©: Loft Moderne Montmartre (${cathelinesPropertyId})`);
    console.log(`   ‚Ä¢ Conversations visibles: ${finalCheck?.length || 0}`);
    
    finalCheck?.forEach(conv => 
      console.log(`     - ${conv.guest_name}`)
    );
    
  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
  }
}

setupCathelineUser();