/**
 * Test complet de la migration production
 * V√©rifie que toutes les structures sont en place
 */

import { createClient } from '@supabase/supabase-js';

const PROD_SUPABASE_URL = process.env.PROD_SUPABASE_URL;
const PROD_SUPABASE_SERVICE_ROLE_KEY = process.env.PROD_SUPABASE_SERVICE_ROLE_KEY;

if (!PROD_SUPABASE_URL || !PROD_SUPABASE_SERVICE_ROLE_KEY) {
    console.error('‚ùå Variables d\'environnement manquantes pour la production');
    process.exit(1);
}

const supabase = createClient(PROD_SUPABASE_URL, PROD_SUPABASE_SERVICE_ROLE_KEY);

async function testMigration() {
    console.log('üîç Test de validation de la migration production...\n');
    
    try {
        // Test 1: Fonction de validation int√©gr√©e
        console.log('üìã Test 1: Validation syst√®me int√©gr√©e');
        const { data: validationTests, error: validationError } = await supabase
            .rpc('test_emergency_system');
        
        if (validationError) {
            console.error('‚ùå Erreur fonction de validation:', validationError);
            return false;
        }
        
        console.log('R√©sultats des tests int√©gr√©s:');
        validationTests.forEach(test => {
            const status = test.status === 'PASS' ? '‚úÖ' : '‚ùå';
            console.log(`  ${status} ${test.test_name}: ${test.details}`);
        });
        
        const allPassed = validationTests.every(test => test.status === 'PASS');
        if (!allPassed) {
            console.log('‚ùå Certains tests int√©gr√©s ont √©chou√©');
            return false;
        }
        
        // Test 2: Structure de la table conversation_analysis
        console.log('\nüìã Test 2: Structure table conversation_analysis');
        const { data: analysisTable, error: analysisError } = await supabase
            .from('conversation_analysis')
            .select('*')
            .limit(1);
        
        if (analysisError) {
            console.error('‚ùå Table conversation_analysis inaccessible:', analysisError);
            return false;
        }
        console.log('‚úÖ Table conversation_analysis accessible');
        
        // Test 3: Colonnes ajout√©es aux conversations
        console.log('\nüìã Test 3: Nouvelles colonnes conversations');
        const { data: conversations, error: convError } = await supabase
            .from('conversations')
            .select('id, last_analysis_tag, last_analysis_confidence, needs_attention, priority_level, last_analyzed_at')
            .limit(1);
        
        if (convError) {
            console.error('‚ùå Erreur colonnes conversations:', convError);
            return false;
        }
        console.log('‚úÖ Nouvelles colonnes conversations pr√©sentes');
        
        // Test 4: Vues cr√©√©es
        console.log('\nüìã Test 4: Vues utilitaires');
        const { data: urgentConvs, error: urgentError } = await supabase
            .from('urgent_conversations')
            .select('*')
            .limit(1);
        
        if (urgentError) {
            console.error('‚ùå Vue urgent_conversations:', urgentError);
            return false;
        }
        console.log('‚úÖ Vue urgent_conversations fonctionnelle');
        
        const { data: tagStats, error: statsError } = await supabase
            .from('tag_statistics')
            .select('*')
            .limit(1);
        
        if (statsError) {
            console.error('‚ùå Vue tag_statistics:', statsError);
            return false;
        }
        console.log('‚úÖ Vue tag_statistics fonctionnelle');
        
        // Test 5: Test d'insertion d'analyse
        console.log('\nüìã Test 5: Insertion analyse de test');
        
        // R√©cup√©rer une conversation existante
        const { data: existingConv, error: convSelectError } = await supabase
            .from('conversations')
            .select('id')
            .limit(1);
        
        if (convSelectError || !existingConv.length) {
            console.log('‚ö†Ô∏è  Aucune conversation existante pour test d\'insertion');
        } else {
            const conversationId = existingConv[0].id;
            
            // Ins√©rer une analyse de test
            const { data: insertResult, error: insertError } = await supabase
                .from('conversation_analysis')
                .insert({
                    conversation_id: conversationId,
                    analysis_type: 'emergency',
                    tag: 'Urgence critique',
                    confidence: 0.95,
                    explanation: 'Test migration - analyse automatique',
                    needs_attention: true,
                    priority_level: 5
                })
                .select();
            
            if (insertError) {
                console.error('‚ùå Erreur insertion analyse:', insertError);
                return false;
            }
            
            console.log('‚úÖ Insertion analyse r√©ussie');
            
            // V√©rifier que la conversation a √©t√© mise √† jour automatiquement
            const { data: updatedConv, error: updateCheckError } = await supabase
                .from('conversations')
                .select('last_analysis_tag, needs_attention, priority_level')
                .eq('id', conversationId)
                .single();
            
            if (updateCheckError) {
                console.error('‚ùå Erreur v√©rification trigger:', updateCheckError);
                return false;
            }
            
            if (updatedConv.last_analysis_tag === 'Urgence critique' && 
                updatedConv.needs_attention === true && 
                updatedConv.priority_level === 5) {
                console.log('‚úÖ Triggers de synchronisation fonctionnels');
            } else {
                console.log('‚ùå Triggers de synchronisation d√©faillants');
                return false;
            }
            
            // Nettoyer l'analyse de test
            await supabase
                .from('conversation_analysis')
                .delete()
                .eq('explanation', 'Test migration - analyse automatique');
        }
        
        console.log('\nüéâ Migration production valid√©e avec succ√®s !');
        console.log('\nüìä R√©sum√©:');
        console.log('  ‚úÖ Table conversation_analysis cr√©√©e');
        console.log('  ‚úÖ Colonnes conversations ajout√©es');
        console.log('  ‚úÖ Vues utilitaires fonctionnelles');
        console.log('  ‚úÖ Triggers automatiques actifs');
        console.log('  ‚úÖ Syst√®me de tags GPT-4o op√©rationnel');
        
        return true;
        
    } catch (error) {
        console.error('‚ùå Erreur inattendue:', error);
        return false;
    }
}

// Test des fonctionnalit√©s m√©tier
async function testBusinessLogic() {
    console.log('\nüîß Test des fonctionnalit√©s m√©tier...\n');
    
    try {
        // Test des fonctions de calcul de priorit√©
        console.log('üìã Test: Fonction calcul priorit√©');
        const { data: priorityTest, error: priorityError } = await supabase
            .rpc('calculate_priority_level', { tag_value: 'Urgence critique' });
        
        if (priorityError) {
            console.error('‚ùå Fonction calculate_priority_level:', priorityError);
            return false;
        }
        
        if (priorityTest === 5) {
            console.log('‚úÖ Calcul priorit√© "Urgence critique" = 5');
        } else {
            console.log('‚ùå Calcul priorit√© incorrect');
            return false;
        }
        
        // Test autres niveaux
        const testCases = [
            { tag: 'Escalade comportementale', expected: 4 },
            { tag: 'Client m√©content', expected: 3 },
            { tag: 'Intervention h√¥te requise', expected: 3 },
            { tag: 'IA incertaine', expected: 2 },
            { tag: 'R√©ponse connue', expected: 1 }
        ];
        
        for (const testCase of testCases) {
            const { data: result } = await supabase
                .rpc('calculate_priority_level', { tag_value: testCase.tag });
            
            if (result === testCase.expected) {
                console.log(`‚úÖ ${testCase.tag} = ${testCase.expected}`);
            } else {
                console.log(`‚ùå ${testCase.tag} attendu ${testCase.expected}, re√ßu ${result}`);
                return false;
            }
        }
        
        console.log('\nüéâ Fonctionnalit√©s m√©tier valid√©es !');
        return true;
        
    } catch (error) {
        console.error('‚ùå Erreur test m√©tier:', error);
        return false;
    }
}

async function main() {
    console.log('üöÄ VALIDATION COMPL√àTE MIGRATION PRODUCTION\n');
    console.log(`üìç Base de donn√©es: ${PROD_SUPABASE_URL}`);
    console.log(`üîë Cl√© service configur√©e: ${PROD_SUPABASE_SERVICE_ROLE_KEY ? 'Oui' : 'Non'}\n`);
    
    const migrationValid = await testMigration();
    const businessValid = await testBusinessLogic();
    
    if (migrationValid && businessValid) {
        console.log('\nüéâ SUCC√àS COMPLET - Migration production op√©rationnelle !');
        console.log('\nüöÄ Prochaines √©tapes:');
        console.log('  1. L\'onglet "Urgences" sera maintenant fonctionnel');
        console.log('  2. Les messages WhatsApp seront analys√©s automatiquement');
        console.log('  3. Les tags de priorit√© s\'afficheront en temps r√©el');
        console.log('  4. Les notifications d\'urgence sont activ√©es');
        
        process.exit(0);
    } else {
        console.log('\n‚ùå √âCHEC - Migration incompl√®te ou d√©faillante');
        process.exit(1);
    }
}

main();