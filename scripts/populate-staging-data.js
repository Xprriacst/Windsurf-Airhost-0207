#!/usr/bin/env node

// Script pour peupler l'instance staging avec des donn√©es de test

import { createClient } from '@supabase/supabase-js';

const STAGING_URL = 'https://tornfqtvnzkgnwfudxdb.supabase.co';
const STAGING_SERVICE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRvcm5mcXR2bnprZ253ZnVkeGRiIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTczOTc4MzY0NSwiZXhwIjoyMDU1MzU5NjQ1fQ.nbhxWUoyYT5a8XxpC2la9sMYMKDJL95YQ9hhFvy5tos';

const supabase = createClient(STAGING_URL, STAGING_SERVICE_KEY);

async function populateStagingData() {
  console.log('üîÑ Peuplement de l\'instance staging avec des donn√©es de test\n');

  try {
    // 1. Cr√©er un utilisateur test
    const { data: userData, error: userError } = await supabase.auth.admin.createUser({
      email: 'test-staging@airhost.com',
      password: 'StgTest2025!',
      email_confirm: true
    });

    if (userError && !userError.message.includes('already been registered')) {
      console.log(`‚ùå Erreur cr√©ation utilisateur: ${userError.message}`);
      return;
    }

    console.log('‚úÖ Utilisateur test configur√©');

    // 2. Cr√©er un host de test
    const { data: hostData, error: hostError } = await supabase
      .from('hosts')
      .insert({
        name: 'Host Staging Test',
        email: 'host-staging@airhost.com',
        phone: '+33123456789'
      })
      .select()
      .single();

    if (hostError) {
      console.log(`‚ùå Erreur cr√©ation host: ${hostError.message}`);
      return;
    }

    console.log('‚úÖ Host test cr√©√©');

    // 3. Cr√©er une propri√©t√© de test
    const { data: propertyData, error: propertyError } = await supabase
      .from('properties')
      .insert({
        name: 'Appartement Staging Test',
        address: '123 Rue du Test, Staging City',
        host_id: hostData.id
      })
      .select()
      .single();

    if (propertyError) {
      console.log(`‚ùå Erreur cr√©ation propri√©t√©: ${propertyError.message}`);
      return;
    }

    console.log('‚úÖ Propri√©t√© test cr√©√©e');

    // 4. Cr√©er des conversations de test
    const conversations = [
      {
        guest_name: 'Client Test Urgence',
        guest_phone: '+33987654321',
        property_id: propertyData.id,
        host_id: hostData.id,
        status: 'active'
      },
      {
        guest_name: 'Client Test Normal',
        guest_phone: '+33987654322',
        property_id: propertyData.id,
        host_id: hostData.id,
        status: 'active'
      }
    ];

    const { data: conversationData, error: conversationError } = await supabase
      .from('conversations')
      .insert(conversations)
      .select();

    if (conversationError) {
      console.log(`‚ùå Erreur cr√©ation conversations: ${conversationError.message}`);
      return;
    }

    console.log('‚úÖ Conversations test cr√©√©es');

    // 5. Ajouter des messages de test
    const messages = [
      {
        conversation_id: conversationData[0].id,
        content: 'URGENCE: La chaudi√®re ne fonctionne plus et il fait tr√®s froid!',
        sender_type: 'guest',
        sender_name: 'Client Test Urgence'
      },
      {
        conversation_id: conversationData[1].id,
        content: 'Bonjour, o√π puis-je trouver les cl√©s de la cave?',
        sender_type: 'guest',
        sender_name: 'Client Test Normal'
      }
    ];

    const { data: messageData, error: messageError } = await supabase
      .from('messages')
      .insert(messages)
      .select();

    if (messageError) {
      console.log(`‚ùå Erreur cr√©ation messages: ${messageError.message}`);
      return;
    }

    console.log('‚úÖ Messages test cr√©√©s');

    // 6. Cr√©er des analyses de test
    const analyses = [
      {
        conversation_id: conversationData[0].id,
        message_id: messageData[0].id,
        analysis_type: 'emergency',
        tag: 'Urgence critique',
        confidence: 0.95,
        explanation: 'Probl√®me de chauffage en hiver - intervention imm√©diate requise',
        needs_attention: true
      },
      {
        conversation_id: conversationData[1].id,
        message_id: messageData[1].id,
        analysis_type: 'category',
        tag: 'R√©ponse connue',
        confidence: 0.80,
        explanation: 'Question standard sur les √©quipements',
        needs_attention: false
      }
    ];

    const { data: analysisData, error: analysisError } = await supabase
      .from('conversation_analysis')
      .insert(analyses)
      .select();

    if (analysisError) {
      console.log(`‚ùå Erreur cr√©ation analyses: ${analysisError.message}`);
      return;
    }

    console.log('‚úÖ Analyses test cr√©√©es');

    // 7. V√©rification finale
    const { count: convCount } = await supabase
      .from('conversations')
      .select('*', { count: 'exact', head: true });

    const { count: msgCount } = await supabase
      .from('messages')
      .select('*', { count: 'exact', head: true });

    const { count: analysisCount } = await supabase
      .from('conversation_analysis')
      .select('*', { count: 'exact', head: true });

    console.log('\nüìä R√©sum√© des donn√©es staging:');
    console.log(`   Conversations: ${convCount}`);
    console.log(`   Messages: ${msgCount}`);
    console.log(`   Analyses: ${analysisCount}`);

    console.log('\nüéâ Instance staging peupl√©e avec succ√®s!');
    console.log('Credentials de test:');
    console.log('  Email: test-staging@airhost.com');
    console.log('  Password: StgTest2025!');

  } catch (error) {
    console.log(`‚ùå Erreur g√©n√©rale: ${error.message}`);
  }
}

populateStagingData();