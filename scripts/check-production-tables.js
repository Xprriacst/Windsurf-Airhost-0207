#!/usr/bin/env node

// Script pour v√©rifier la structure de l'instance de production
// et identifier les √©l√©ments manquants pour la d√©tection d'urgence

import { createClient } from '@supabase/supabase-js';

const PRODUCTION_URL = 'https://pnbfsiicxhckptlgtjoj.supabase.co';
const PRODUCTION_SERVICE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBuYmZzaWljeGhja3B0bGd0am9qIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0NzY2NTUwMiwiZXhwIjoyMDYzMjQxNTAyfQ.DPKTpahAzRv1X3crxS81XhmLSzbW8fUbAQ22Ru0GFdc';

const supabase = createClient(PRODUCTION_URL, PRODUCTION_SERVICE_KEY);

async function checkProductionStructure() {
  console.log('üîç V√©rification de la structure de production...\n');

  try {
    // 1. V√©rifier les tables principales directement
    console.log('üìã V√©rification des tables principales:');
    
    const tablesToCheck = ['conversations', 'messages', 'conversation_analysis', 'properties', 'hosts'];
    const existingTables = [];
    
    for (const tableName of tablesToCheck) {
      try {
        const { data, error } = await supabase
          .from(tableName)
          .select('*', { count: 'exact', head: true });
        
        if (!error) {
          existingTables.push(tableName);
          console.log(`  ‚úÖ ${tableName} - ${data?.length || 0} lignes`);
        } else {
          console.log(`  ‚ùå ${tableName} - ${error.message}`);
        }
      } catch (err) {
        console.log(`  ‚ùå ${tableName} - Erreur: ${err.message}`);
      }
    }

    // 2. V√©rifier sp√©cifiquement conversation_analysis
    console.log('\nüîç Analyse d√©taill√©e de conversation_analysis:');
    const hasAnalysisTable = existingTables.includes('conversation_analysis');
    
    if (hasAnalysisTable) {
      const { data: analyses, count } = await supabase
        .from('conversation_analysis')
        .select('tag', { count: 'exact' })
        .limit(10);

      console.log(`  Nombre total d'analyses: ${count || 0}`);

      if (count > 0) {
        const uniqueTags = [...new Set(analyses?.map(a => a.tag) || [])];
        console.log('  Tags utilis√©s:', uniqueTags);
      }
    }

    // 3. V√©rifier les donn√©es de conversations
    console.log('\nüí¨ Donn√©es de conversations:');
    if (existingTables.includes('conversations')) {
      const { data: conversations, count } = await supabase
        .from('conversations')
        .select('id, guest_name, status', { count: 'exact' })
        .limit(5);

      console.log(`  Total: ${count || 0} conversations`);
      conversations?.forEach(conv => 
        console.log(`    - ${conv.guest_name} (${conv.status})`)
      );
    }

    // 4. Recommandations
    console.log('\nüìù Recommandations:');
    
    if (!hasAnalysisTable) {
      console.log('‚ùå Table conversation_analysis manquante - n√©cessaire pour les tags d\'urgence');
      console.log('   ‚Üí Ex√©cuter: scripts/migrate-production-to-staging.sql');
    }

    const requiredTables = ['conversations', 'messages', 'properties', 'hosts'];
    const missingTables = requiredTables.filter(table => !existingTables.includes(table));
    
    if (missingTables.length > 0) {
      console.log(`‚ùå Tables manquantes: ${missingTables.join(', ')}`);
    } else {
      console.log('‚úÖ Toutes les tables requises sont pr√©sentes');
    }

    console.log('\nüìã Prochaines √©tapes:');
    console.log('1. Cr√©er l\'instance Supabase staging');
    console.log('2. Ex√©cuter scripts/migrate-production-to-staging.sql sur les deux instances');
    console.log('3. Configurer les variables d\'environnement staging');
    
    console.log('\n‚úÖ V√©rification termin√©e');

  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error.message);
  }
}

// Ex√©cuter la v√©rification
checkProductionStructure();